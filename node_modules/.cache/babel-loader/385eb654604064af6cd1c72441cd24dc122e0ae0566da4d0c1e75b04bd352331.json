{"ast":null,"code":"var _jsxFileName = \"/Users/jiawenhe/Desktop/22 Fall/CS5610/jiawen_he_project2/src/GuessBoard.jsx\",\n  _s = $RefreshSig$();\nimport { React, useContext, useState, useEffect, useRef } from 'react';\nimport './game.css';\nimport { gameContext } from './GameProvider';\nimport './modal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GuessBoard(props) {\n  _s();\n  const context = useContext(gameContext);\n  let dispatch = context.dispatch;\n  let game_state = context.game_state;\n  let ACTION = context.ACTION;\n  let answer = game_state.word;\n  let index = game_state.curr_index;\n  let row = game_state.chance;\n  let col = game_state.letter_guess;\n  let guessed_list = game_state.guessed_list;\n  let guess = game_state.temp_guess;\n  let row_style, board_style;\n  if (game_state.isHard) {\n    row_style = \"guess_row_hard\";\n    board_style = \"guess_board_hard\";\n  } else {\n    row_style = \"guess_row_normal\";\n    board_style = \"guess_board_normal\";\n  }\n  function check_correct(ans, gus) {\n    let res = [];\n    const map = new Map();\n    for (let i = 0; i < col; i++) {\n      map.set(ans[i], map.has(ans[i]) ? map.get(ans[i]) + 1 : 1);\n      if (ans[i].toLowerCase() === gus[i].toLowerCase()) {\n        res[i] = \"guess right\";\n        map.set(ans[i], map.get(ans[i]) - 1);\n      }\n    }\n    for (let i = 0; i < col; i++) {\n      if (res[i] === undefined) {\n        if (map.has(gus[i]) && map.get(gus[i]) !== 0) {\n          res[i] = 'guess well';\n        } else {\n          res[i] = 'guess wrong';\n        }\n      }\n    }\n    return res;\n  }\n  function create_guessboard() {\n    const guessboard = [];\n    let padding = true;\n    for (let i = 0; i < row; i++) {\n      const guess_row = [];\n      let res = [];\n      if (guessed_list[i]) {\n        res = check_correct(answer, guessed_list[i]);\n      }\n      for (let j = 0; j < col; j++) {\n        if (guessed_list[i]) {\n          let letter = guessed_list[i][j];\n          guess_row.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            className: res[j],\n            children: letter\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 32\n          }, this));\n        } else if (guess[j] && padding) {\n          guess_row.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"guess\",\n            children: guess[j]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 32\n          }, this));\n          if (j === col - 1) {\n            padding = false;\n          }\n        } else {\n          padding = false;\n          guess_row.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"guess\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 32\n          }, this));\n        }\n      }\n      guessboard.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: row_style,\n        children: guess_row\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 25\n      }, this));\n    }\n    return guessboard;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"guess_board_container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: board_style,\n      children: create_guessboard()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(GuessBoard, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n_c = GuessBoard;\nvar _c;\n$RefreshReg$(_c, \"GuessBoard\");","map":{"version":3,"names":["React","useContext","useState","useEffect","useRef","gameContext","GuessBoard","props","context","dispatch","game_state","ACTION","answer","word","index","curr_index","row","chance","col","letter_guess","guessed_list","guess","temp_guess","row_style","board_style","isHard","check_correct","ans","gus","res","map","Map","i","set","has","get","toLowerCase","undefined","create_guessboard","guessboard","padding","guess_row","j","letter","push"],"sources":["/Users/jiawenhe/Desktop/22 Fall/CS5610/jiawen_he_project2/src/GuessBoard.jsx"],"sourcesContent":["import { React, useContext, useState, useEffect, useRef } from 'react';\nimport './game.css';\nimport { gameContext } from './GameProvider';\nimport './modal.css';\n\nexport default function GuessBoard(props) {\n  const context = useContext(gameContext);\n\n  let dispatch = context.dispatch;\n  let game_state = context.game_state;\n  let ACTION = context.ACTION;\n  \n\n  let answer = game_state.word;\n  let index = game_state.curr_index;\n\n  let row = game_state.chance;\n  let col = game_state.letter_guess;\n  let guessed_list = game_state.guessed_list;\n  let guess = game_state.temp_guess;\n  let row_style, board_style;\n\n  if(game_state.isHard){\n    row_style = \"guess_row_hard\";\n    board_style = \"guess_board_hard\";\n  }else{\n    row_style = \"guess_row_normal\";\n    board_style = \"guess_board_normal\";\n  }\n\n  function check_correct(ans, gus){\n    let res = [];\n    const map = new Map();\n\n    for(let i = 0; i < col; i++){\n      map.set(ans[i], map.has(ans[i]) ? map.get(ans[i]) + 1 : 1);\n      if(ans[i].toLowerCase() === gus[i].toLowerCase()){\n        res[i] = \"guess right\";\n        map.set(ans[i], map.get(ans[i]) - 1);\n      }\n    }\n\n    for(let i = 0; i < col; i++){\n      if(res[i] === undefined){\n        if(map.has(gus[i]) && map.get(gus[i]) !== 0){\n          res[i] = 'guess well';\n        }else{\n          res[i] = 'guess wrong';\n        }\n      }\n    }\n    return res;\n  }\n\n  function create_guessboard(){\n    const guessboard = [];\n    let padding = true;\n    for(let i = 0; i < row; i++){\n        const guess_row = [];\n\n        let res = [];\n        if(guessed_list[i]){\n          res = check_correct(answer, guessed_list[i]);\n        }\n\n        for(let j = 0; j < col; j++){\n            if(guessed_list[i]){\n                let letter = guessed_list[i][j];                \n                guess_row.push(<div className={res[j]}>{letter}</div>);\n            }else if(guess[j] && padding){\n                guess_row.push(<div className='guess'>{guess[j]}</div>);\n                if(j === col - 1){\n                    padding = false;\n                }\n            }else{\n                padding = false;\n                guess_row.push(<div className='guess'></div>);\n            }\n\n        }\n        guessboard.push(<div className={row_style}>{guess_row}</div>);\n    }\n    return guessboard;\n  }\n\n  return(\n    <div className='guess_board_container'>\n        <div className={board_style}>\n            {create_guessboard()}\n        </div>\n    </div>\n\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}